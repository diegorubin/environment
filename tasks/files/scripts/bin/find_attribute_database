#!/usr/bin/env python3

from pymongo import MongoClient
import json
import os
import subprocess
from pathlib import Path

import yaml

MONGO_URL = "mongodb://localhost:27017/"
CLIENT = MongoClient(MONGO_URL)
DATABASE = CLIENT["wallpapers"]
wallpapers = DATABASE.wallpapers

CONFIGS = {
    "home": str(Path.home()),
}

with open("{}/.wallhaven.yaml".format(CONFIGS["home"])) as file:
    configs = yaml.load(file, Loader=yaml.FullLoader)
    CONFIGS.update(configs)


def get_color_from_position(colors, position):
    color = {
        "hex": colors["hex"][position],
    }
    color["h"], color["s"], color["l"] = colors["hsl"][position]
    color["r"], color["g"], color["b"] = colors["rgb"][position]
    return color


def in_range(color, min_values, max_values):
    result = True
    for attribute, value in min_values.items():
        local_result = (
            value <= color[attribute] and color[attribute] <= max_values[attribute]
        )
        result = result and local_result
    return result


def find_color(color, query):
    result = True
    for key, values in query.items():
        if key == "range":
            result = result and in_range(color, values["min"], values["max"])
        elif key == "exact":
            result = result and color["hex"] == values
    return result


def execute_primary_color(colors, query):
    color = get_color_from_position(colors, 0)
    return find_color(color, query)


def execute_has_color(colors, query):
    result = False
    for index in range(0, len(colors["hex"])):
        color = get_color_from_position(colors, index)
        result = result or find_color(color, query)
    return result


def has_conditions(options, query={}):
    result = True
    colors = options["colors"]
    for key, values in query.items():
        if key == "primary_color":
            result = result and execute_primary_color(colors, values)
        elif key == "has_color":
            for conditions in values:
                result = result and execute_has_color(colors, conditions)
    return result


def search(directory_root, query):
    command = ["eog"]
    for wallpaper in wallpapers.find({}):
        if has_conditions(wallpaper["options"], query):
            command.append(
                "{}{}".format(CONFIGS["wallpapers_storage"], wallpaper["path"])
            )

    print(command)
    subprocess.run(command)


# {
#     "primary_color": {"range": {"min": {"h": 10}, "max": {"h": 25}}},
#     "has_color": [{"exact": "#7e584b"}],
# }

search(
    os.walk(CONFIGS["wallpapers_storage"]),
    {
        "primary_color": {
            "range": {
                "min": {"r": 230, "g": 230, "b": 230},
                "max": {"r": 255, "g": 255, "b": 255},
            }
        },
        "has_color": [
            # hsla(357, 97%, 73%, 1)
            {"range": {"min": {"h": 218, "s": 0.6}, "max": {"h": 236, "s": 0.71}}}
            # {"range": {"min": {"h": 350, "s": 0.7}, "max": {"h": 360, "s": 0.8}}}
        ],
    },
)
