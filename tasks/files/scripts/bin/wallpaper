#!/usr/bin/env python3

import json
import os.path
import re
import shutil
import subprocess
from pathlib import Path
from urllib.request import urlopen

import gi
import requests
import yaml
from gi.repository import Gdk, Gtk

gi.require_version("Gtk", "3.0")


CONFIGS = {
    "home": str(Path.home()),
    "purity": "100",
    "categories": "111",
    "destination_thumbs": "/tmp/",
    "current_wallpaper": "{}/.wallpaper".format(str(Path.home())),
    "screens": ["1"],
    "ratios": [
        ["wide", "16x9,16x10"],
        ["ultrawide", "21x9,32x9,48x9"],
        ["portrait", "9x16"],
    ],
}

URL = "https://wallhaven.cc/api/v1/search"
COLLECTIONS_URL = "https://wallhaven.cc/api/v1/collections"
WALLPAPER_URL = "https://wallhaven.cc/api/v1/w/"

with open("{}/.wallhaven.yaml".format(CONFIGS["home"])) as file:
    configs = yaml.load(file, Loader=yaml.FullLoader)
    CONFIGS.update(configs)


class Dialog:
    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_title("Wallapapers")

        self.window.set_default_size(150, 100)
        self.window.connect("destroy", Gtk.main_quit)

        label = Gtk.Label("Choose an wallpaper:")

        # options
        options_box = Gtk.HBox()

        self.entry = Gtk.Entry()
        options_box.pack_start(self.entry, expand=True, fill=True, padding=0)

        self.screens_combo = Gtk.ComboBoxText()
        self.screens_combo.set_entry_text_column(0)
        for screen in CONFIGS["screens"]:
            self.screens_combo.append_text(screen)
        self.screens_combo.set_active(0)
        options_box.pack_start(self.screens_combo, expand=False, fill=True, padding=0)

        ratios_store = Gtk.ListStore(str, str)
        for ratio in CONFIGS["ratios"]:
            ratios_store.append(ratio)
        self.ratios_combo = Gtk.ComboBox.new_with_model_and_entry(ratios_store)
        self.ratios_combo.set_entry_text_column(0)
        options_box.pack_start(self.ratios_combo, expand=False, fill=True, padding=0)

        collections_store = Gtk.ListStore(str, str)
        collections = self.__get_collections()
        for collection in collections:
            collections_store.append(collection)
        self.collections_combo = Gtk.ComboBox.new_with_model_and_entry(
            collections_store
        )
        self.collections_combo.set_entry_text_column(0)
        options_box.pack_start(
            self.collections_combo, expand=False, fill=True, padding=0
        )

        # end options

        btn_search = Gtk.Button("Buscar")
        btn_search.connect("clicked", self.__search)

        box = Gtk.VBox()
        box.pack_start(label, expand=False, fill=True, padding=0)
        box.pack_start(options_box, expand=False, fill=True, padding=0)
        box.pack_start(btn_search, expand=False, fill=True, padding=0)
        self.window.add(box)

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_border_width(10)
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        box.add(scrolled_window)

        table = Gtk.Table(8, 3, True)
        table.set_row_spacings(5)
        table.set_col_spacings(5)
        scrolled_window.add(table)

        history_scrolled_window = Gtk.ScrolledWindow()
        history_scrolled_window.set_border_width(5)
        history_scrolled_window.set_policy(
            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC
        )
        history_scrolled_window.set_size_request(300, 200)
        box.pack_start(history_scrolled_window, expand=False, fill=True, padding=0)

        self.history = Gtk.HBox()
        history_scrolled_window.add(self.history)

        pagination_scrolled_window = Gtk.ScrolledWindow()
        pagination_scrolled_window.set_border_width(5)
        pagination_scrolled_window.set_policy(
            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC
        )
        box.pack_start(pagination_scrolled_window, expand=False, fill=True, padding=0)

        self.pagination = Gtk.HBox()
        pagination_scrolled_window.add(self.pagination)

        self.current_page = 1
        self.images = []

        position = 0
        for i in range(0, 8):
            for j in range(0, 3):
                button = Gtk.Button()

                image = Gtk.Image()
                image.set_size_request(300, 200)

                button.connect("clicked", self.__set_background, position)
                button.add(image)

                table.attach(button, j, j + 1, i, i + 1)
                self.images.append(image)
                position += 1

        self.__load_history()

        self.window.show_all()
        Gtk.main()

    def __display_image(self, image, url):
        filename = re.sub(r".*?/", "", url)
        destination = "{}/{}".format(CONFIGS["destination_thumbs"], filename)

        if not os.path.exists(destination):
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                with open(destination, "wb") as f:
                    response.raw.decode_content = True
                    shutil.copyfileobj(response.raw, f)
                    print(destination)

        image.set_from_file(destination)

    def __set_background(self, widget, url):

        if type(url) == int:
            url = self.wallpapers[url]

        current_screen = self.screens_combo.get_active_text()
        destination = CONFIGS["current_wallpaper"].replace(r"screen", current_screen)
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            with open(destination, "wb") as f:
                response.raw.decode_content = True
                shutil.copyfileobj(response.raw, f)

        command = ["feh"]
        for screen in CONFIGS["screens"]:
            command.append("--bg-fill")
            command.append(CONFIGS["current_wallpaper"].replace(r"screen", screen))

        self.__save_history(url)
        print(command)
        subprocess.run(command)

    def __change_page(self, _widget, page):
        self.current_page = page
        self.__search(_widget)

    def __get_collections(self):
        params = {
            "apikey": CONFIGS["apikey"],
        }
        response = requests.get(COLLECTIONS_URL, params=params)
        data = json.loads(response.content)

        return [
            [collection["label"], str(collection["id"])] for collection in data["data"]
        ]

    def __search(self, _widget):
        url = URL
        params = {
            "apikey": CONFIGS["apikey"],
            "q": self.entry.get_text(),
            "page": self.current_page,
            "purity": CONFIGS["purity"],
            "categories": CONFIGS["categories"],
        }

        tree_iter = self.ratios_combo.get_active_iter()
        if tree_iter is not None:
            model = self.ratios_combo.get_model()
            params["ratios"] = model[tree_iter][:2][1]

        tree_iter = self.collections_combo.get_active_iter()
        if tree_iter is not None:
            model = self.collections_combo.get_model()
            collection_id = model[tree_iter][:2][1]
            url = "{}/{}/{}".format(COLLECTIONS_URL, CONFIGS["username"], collection_id)

        response = requests.get(url, params=params)
        data = json.loads(response.content)

        i = 0
        self.wallpapers = []
        for entry in data["data"]:
            self.__display_image(self.images[i], entry["thumbs"]["small"])
            self.wallpapers.append(entry["path"])

            i += 1

        children = self.pagination.get_children()
        for child in children:
            self.pagination.remove(child)

        for i in range(0, data["meta"]["last_page"]):
            btn = Gtk.Button(str(i + 1))
            btn.connect("clicked", self.__change_page, i + 1)
            self.pagination.pack_start(btn, expand=False, fill=False, padding=1)
        self.pagination.show_all()

    def __append_history_item(self, entry):
        url = WALLPAPER_URL + entry

        params = {
            "apikey": CONFIGS["apikey"],
        }

        response = requests.get(url, params=params)
        data = json.loads(response.content)["data"]

        self.__add_image_into_history(data["path"], data["thumbs"]["small"])

    def __add_image_into_history(self, url, thumb):
        button = Gtk.Button()

        image = Gtk.Image()
        image.set_size_request(300, 200)

        button.connect("clicked", self.__set_background, url)
        button.add(image)

        self.__display_image(image, thumb)

        self.history.pack_end(button, expand=False, fill=False, padding=1)

    def __load_history(self):
        self.history_list = []
        try:
            with open("{}/.wallhaven/history".format(CONFIGS["home"])) as file:
                self.history_list = [line.strip() for line in file.readlines()]

            for entry in self.history_list:
                self.__append_history_item(entry.strip())
        except:
            pass

    def __save_history(self, url):
        file = re.sub(r".*?-", "", url)
        wallpaper_id = re.sub(r"\..*", "", file)

        if wallpaper_id not in self.history_list:
            self.history_list.append(wallpaper_id)
        with open("{}/.wallhaven/history".format(CONFIGS["home"]), "w") as file:
            file.write("\n".join(self.history_list))


Dialog()
